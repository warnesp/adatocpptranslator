/*****************************************************************************
 *                      Ada_to_C_Cpp_Translator
 *****************************************************************************
 * Adatoccpptranslator is a free software which convert Ada code to C/C++ 
 * source code
 * Copyright (C) 2004 Julien THEVENON
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
 * more details.
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * For further informations : adatoccpptranslator@free.fr
 * 
 * Description: exploitation of symbol table
 *
 * $Log: table_symbol_exploitation.h,v $
 * Revision 1.3  2005/03/19 13:13:56  quicky2000
 * Update to:
 * _ add comments
 * _ remove useless includes
 *
 * Revision 1.2  2005/03/16 22:55:58  quicky2000
 * Update to add comments
 *
 * Revision 1.1  2005/03/07 23:56:19  quicky2000
 * Update to:
 * _ move the file from src directory
 * _ modify the include paths due to new organisation of source files
 * _ modify some functions prototypes to add log feature
 *
 * Revision 1.2  2005/03/03 23:08:35  quicky2000
 * Update to add function isAnArray
 *
 * Revision 1.1.1.1  2005/03/01 22:20:48  quicky2000
 * Initial import
 *
 *
 *****************************************************************************/

/* ================ PROTECTION CONTRE LES DOUBLES DEFINITIONS =============== */
#ifndef TABLE_SYMBOL_EXPLOITATION_H
#define TABLE_SYMBOL_EXPLOITATION_H

/* ========================================================================== */
/* DIRECTIVES D'INCLUSION (include)                                           */
/* ========================================================================== */
#include "../Tools/list_tools.h"
#include "../Tools/configuration.h"

class array;
class configuration;
class function_spec;
class main_unit;
class package_spec;
class tree;
class type;
class value;

/* ========================================================================== */
/* DECLARATIONS DES VARIABLES GLOBALES                         		      */
/* ========================================================================== */
/* $ ------------------------------------------------------------------------ */
/* $ CONSTANTE GLOBALE     :                                                  */
/* $ TYPE                  :                                                  */
/* $ DESCRIPTION           :                                                  */
/* $ ------------------------------------------------------------------------ */

// Reference on symbol table
extern main_unit *g_TableSymbol;

// Reference on program configuration
extern configuration *g_Config;

/* ========================================================================== */
/* PROTOTYPES DES SOUS PROGRAMMES		                              */
/* ========================================================================== */

/* $ ------------------------------------------------------------------------ */
/* $ Function name : calculate												  */
/* $																		  */
/* $ Input :	p_FpLog		- reference on a log FILE						  */
/* $			p_Value		- reference on a double which will receive the	  */
/* $						  calculated value								  */
/* $			p_MainUnit	- reference on current main unit				  */
/* $																		  */
/* $ Output : value* - reference on a package_spec	    					  */
/* $ Modified variable : p_Value											  */
/* $ Description : Function which return a reference on the the input value   */
/* $	If the input value can't be calculed an error message is logged		  */
/* $ ------------------------------------------------------------------------ */ 
value* calculate(FILE *p_FpLog, value *p_Value, main_unit *p_MainUnit);

/*****************************************************************************
 * Function name : getPackageSpec 
 *
 * Input :	p_FpLog reference on a FILE
 * 		p_Name reference on a string
 * 		p_CurrentMainUnit reference on a main_unit
 * Output : package_spec* - reference on a package_spec
 * Modified variable : none
 * Description : Function which return a reference on package_spec correspondig
 * 	to p_Name by using symbol table and links of p_CurrentMainunit
 *****************************************************************************/ 
package_spec* getPackageSpec( FILE *p_FpLog, char *p_Name,main_unit *p_CurrentMainUnit );

/*****************************************************************************
* Function name : getTypeOf 
*
* Input :	p_Tree reference on a tree
*		p_CurrentMainUnit reference on a main_unit
* Output : type* - Reference on a type object
* Modified variable : none
* Description : Function which determines the type of a node
*****************************************************************************/
type* getTypeOf( FILE *p_FpLog, tree *p_Tree,main_unit *p_CurrentMainUnit);

/*****************************************************************************
* Function name : isAnArray 
*
* Input :	p_FpLog - reference on the log file
*			p_Tree	- reference on a tree
*			p_CurrentMainUnit - reference on a main_unit
* Output : array* - Reference on the array represented by node p_Tree
* Modified variable : none
* Description : Function which determines if a node represents an array.
*	If the node doesn't represent an array, returned value is NULL
*****************************************************************************/
array* isAnArray( FILE *p_FpLog, tree *p_Tree, main_unit *p_CurrentMainUnit);

/*****************************************************************************
* Function name : isTypeAnArray 
*
* Input :	p_FpLog - reference on the log file
*			p_Tree	- reference on a tree
*			p_CurrentMainUnit - reference on a main_unit
* Output : array* - Reference on the array represented by node p_Tree
* Modified variable : none
* Description : Function which determines if a node represents an array type.
*	If the node doesn't represent an array type, returned value is NULL
*****************************************************************************/
array* isTypeAnArray( FILE *p_FpLog, tree *p_Tree, main_unit *p_CurrentMainUnit);

/*****************************************************************************
* Function name : isFunction 
*
* Input :	p_FpLog - reference on the log file
*			p_Tree	- reference on a tree
*			p_CurrentMainUnit - reference on a main_unit
* Output : function_spec* - Reference on the function_spec represented by node p_Tree
* Modified variable : none
* Description : Function which determines if a node represents a function call.
*	If the node doesn't represent a function call, returned value is NULL
*****************************************************************************/
function_spec* isFunction( FILE *p_FpLog, tree *p_Tree, main_unit *p_CurrentMainUnit);

/*****************************************************************************
* Function name : searchType 
*
* Input :	p_FpLog - reference on the log file
*			p_Tree	- reference on a tree
*			p_CurrentMainUnit - reference on a main_unit
* Output : type* - Reference on the type represented by node p_Tree
* Modified variable : none
* Description : Function which determines if a node represents a type
*	If the node doesn't represent a type returned value is NULL
*****************************************************************************/
type* searchType( FILE *p_FpLog, tree *p_Tree, main_unit *p_CurrentMainUnit);

/* ================ FIN PROTECTION CONTRE LES DOUBLES DEFINITIONS =========== */
#endif

/* ================ FIN DU FICHIER DE SPECIFICATION ========================= */
