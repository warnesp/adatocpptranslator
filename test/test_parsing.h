/*****************************************************************************
 *                      Ada_to_C_Cpp_Translator
 *****************************************************************************
 * Adatoccpptranslator is a free software which convert Ada code to C/C++ 
 * source code
 * Copyright (C) 2004 Julien THEVENON
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
 * more details.
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * For further informations : adatoccpptranslator@free.fr
 * 
 * Description: test of lexical and syntaxic analysis
 *
 * $Log: test_parsing.h,v $
 * Revision 1.2  2005/03/04 19:24:38  quicky2000
 * Update of path of include files due to changes in source orgnaisation
 *
 * Revision 1.1.1.1  2005/03/01 22:20:53  quicky2000
 * Initial import
 *
 *
 *****************************************************************************/
#ifndef TEST_PARSING_H
#define TEST_PARSING_H

#include "../src/Tools/file_management.h"
#include "../src/Tools/tree.h"
#include "../obj/y.tab.h"

// yyparse function is defined in syntax.y
extern void yyparse(void);

//nl variable is declared in lexico.l
//it contains the line number of token find by flex
extern int lineNumber;

// mon yyval is declared in syntax.y file
// it references the tree generated by bison during syntax analysis
extern tree* myYyval;

char g_BoolSyntaxError=0;

int main(int argc, char** argv);
#endif
